import { ASTNode } from "../parser/solidity";
import { SecurityAnalyzer, SecurityAnalysisResult } from "./securityAnalyzer";
import { Issue } from "../types/common";

export interface VulnerabilityReport {
    filePath: string;
    issues: Issue[];
    summary: {
        highSeverity: number;
        mediumSeverity: number;
        lowSeverity: number;
        infoSeverity: number;
        total: number;
    };
}

export class VulnerabilityAnalyzer {
    private securityAnalyzer: SecurityAnalyzer;
    private ast: ASTNode;
    private sourceCode: string;
    private filePath: string;

    constructor(ast: ASTNode, sourceCode: string, filePath: string) {
        this.ast = ast;
        this.sourceCode = sourceCode;
        this.filePath = filePath;
        this.securityAnalyzer = new SecurityAnalyzer(ast, sourceCode, filePath);
    }

    public analyze(): VulnerabilityReport {
        const result = this.securityAnalyzer.analyze();
        const processedIssues: Issue[] = result.issues.map((issue) => ({
            id: issue.id,
            title: issue.title,
            description: issue.description,
            message: issue.description,
            severity: issue.severity,
            line: issue.line || 0,
            column: issue.column || 0,
            canAutoFix: issue.canAutoFix,
            suggestions: issue.suggestions,
        }));

        return {
            filePath: this.filePath,
            issues: processedIssues,
            summary: {
                highSeverity: result.stats.issuesBySeverity.high,
                mediumSeverity: result.stats.issuesBySeverity.medium,
                lowSeverity: result.stats.issuesBySeverity.low,
                infoSeverity: result.stats.issuesBySeverity.info,
                total: result.stats.totalIssues,
            },
        };
    }

    public getHighSeverityReport(
        report: VulnerabilityReport
    ): VulnerabilityReport {
        const highSeverityIssues = report.issues.filter(
            (issue) => issue.severity === "high"
        );
        return {
            ...report,
            issues: highSeverityIssues,
            summary: {
                ...report.summary,
                total: highSeverityIssues.length,
            },
        };
    }
}
