import { ASTNode } from '../parser/solidity';
import { SecurityAnalyzer } from '../analyzer/securityAnalyzer';
import { Issue } from '../types/rules';

export interface VulnerabilityReport {
    filePath: string;
    issues: Issue[];
    summary: {
        highSeverity: number;
        mediumSeverity: number;
        lowSeverity: number;
        infoSeverity: number;
        total: number;
    };
}
export class VulnerabilityAnalyzer {
    private securityAnalyzer: SecurityAnalyzer;
    
    constructor() {
        this.securityAnalyzer = new SecurityAnalyzer();
    }
    public analyze(ast: ASTNode, sourceCode: string, filePath: string): VulnerabilityReport {
        // Run the security analyzer
        const result = this.securityAnalyzer.analyze(ast, sourceCode, filePath, {
        });
        return {
            filePath,
            issues: result.issues,
            summary: {
                highSeverity: result.stats.issuesBySeverity.high,
                mediumSeverity: result.stats.issuesBySeverity.medium,
                lowSeverity: result.stats.issuesBySeverity.low,
                infoSeverity: result.stats.issuesBySeverity.info,
                total: result.stats.totalIssues
            }
        };
    }
    public getHighSeverityReport(report: VulnerabilityReport): VulnerabilityReport {
        const highSeverityIssues = report.issues.filter(issue => issue.severity === 'high');        
        return {
            ...report,
            issues: highSeverityIssues,
            summary: {
                ...report.summary,
                total: highSeverityIssues.length
            }
        };
    }
}